package courseProject;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.HashMap;
import java.util.Map;

public class BankAcctApp {
    private JFrame frame;
    private JTextField customerIdField, nameField, accountNumberField, initialBalanceField;
    private JTextField transactionDateField, transactionAmountField;
    private JRadioButton checkingRadioButton, savingsRadioButton, depositRadioButton, withdrawalRadioButton;
    private JComboBox<String> stateComboBox;
    private JLabel statusLabel, summaryLabel;
    private Map<String, Account> accounts = new HashMap<>();
    private Map<String, Customer> customers = new HashMap<>();

    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                BankAcctApp window = new BankAcctApp();
                window.frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public BankAcctApp() {
        initialize();
    }

    private void initialize() {
        frame = new JFrame("Bank Account Application");
        frame.setBounds(100, 100, 700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        JLabel lblCustomerId = new JLabel("Customer ID:");
        lblCustomerId.setBounds(10, 10, 100, 25);
        frame.getContentPane().add(lblCustomerId);

        customerIdField = new JTextField();
        customerIdField.setBounds(120, 10, 150, 25);
        frame.getContentPane().add(customerIdField);

        JLabel lblName = new JLabel("Name:");
        lblName.setBounds(10, 40, 100, 25);
        frame.getContentPane().add(lblName);

        nameField = new JTextField();
        nameField.setBounds(120, 40, 150, 25);
        frame.getContentPane().add(nameField);

        JLabel lblAccountNumber = new JLabel("Account Number:");
        lblAccountNumber.setBounds(10, 70, 100, 25);
        frame.getContentPane().add(lblAccountNumber);

        accountNumberField = new JTextField();
        accountNumberField.setBounds(120, 70, 150, 25);
        frame.getContentPane().add(accountNumberField);

        JLabel lblInitialBalance = new JLabel("Initial Balance:");
        lblInitialBalance.setBounds(10, 100, 100, 25);
        frame.getContentPane().add(lblInitialBalance);

        initialBalanceField = new JTextField();
        initialBalanceField.setBounds(120, 100, 150, 25);
        frame.getContentPane().add(initialBalanceField);

        JLabel lblAccountType = new JLabel("Account Type:");
        lblAccountType.setBounds(10, 130, 100, 25);
        frame.getContentPane().add(lblAccountType);

        checkingRadioButton = new JRadioButton("Checking");
        checkingRadioButton.setBounds(120, 130, 100, 25);
        frame.getContentPane().add(checkingRadioButton);

        savingsRadioButton = new JRadioButton("Savings");
        savingsRadioButton.setBounds(220, 130, 100, 25);
        frame.getContentPane().add(savingsRadioButton);

        ButtonGroup accountTypeGroup = new ButtonGroup();
        accountTypeGroup.add(checkingRadioButton);
        accountTypeGroup.add(savingsRadioButton);

        JLabel lblState = new JLabel("State:");
        lblState.setBounds(10, 160, 100, 25);
        frame.getContentPane().add(lblState);

        stateComboBox = new JComboBox<>(new String[]{"WI", "IL", "MN", "IA", "MI"});
        stateComboBox.setBounds(120, 160, 150, 25);
        frame.getContentPane().add(stateComboBox);

        JButton btnAddCustomer = new JButton("Add New Customer and Account");
        btnAddCustomer.setBounds(10, 190, 260, 25);
        frame.getContentPane().add(btnAddCustomer);
        btnAddCustomer.addActionListener(e -> addCustomerAndAccount());

        JButton btnDisplayCustomer = new JButton("Display Customer and Account Data");
        btnDisplayCustomer.setBounds(10, 220, 260, 25);
        frame.getContentPane().add(btnDisplayCustomer);
        btnDisplayCustomer.addActionListener(e -> displayCustomerAndAccountData());

        JLabel lblTransactionDate = new JLabel("Transaction Date:");
        lblTransactionDate.setBounds(10, 250, 120, 25);
        frame.getContentPane().add(lblTransactionDate);

        transactionDateField = new JTextField();
        transactionDateField.setBounds(140, 250, 150, 25);
        frame.getContentPane().add(transactionDateField);

        JLabel lblTransactionAmount = new JLabel("Transaction Amount:");
        lblTransactionAmount.setBounds(10, 280, 120, 25);
        frame.getContentPane().add(lblTransactionAmount);

        transactionAmountField = new JTextField();
        transactionAmountField.setBounds(140, 280, 150, 25);
        frame.getContentPane().add(transactionAmountField);

        JLabel lblTransactionType = new JLabel("Transaction Type:");
        lblTransactionType.setBounds(10, 310, 120, 25);
        frame.getContentPane().add(lblTransactionType);

        depositRadioButton = new JRadioButton("Deposit");
        depositRadioButton.setBounds(140, 310, 100, 25);
        frame.getContentPane().add(depositRadioButton);

        withdrawalRadioButton = new JRadioButton("Withdrawal");
        withdrawalRadioButton.setBounds(240, 310, 100, 25);
        frame.getContentPane().add(withdrawalRadioButton);

        ButtonGroup transactionTypeGroup = new ButtonGroup();
        transactionTypeGroup.add(depositRadioButton);
        transactionTypeGroup.add(withdrawalRadioButton);

        JButton btnPerformTransaction = new JButton("Perform Transaction");
        btnPerformTransaction.setBounds(10, 340, 260, 25);
        frame.getContentPane().add(btnPerformTransaction);
        btnPerformTransaction.addActionListener(e -> performTransaction());

        JButton btnClear = new JButton("Clear");
        btnClear.setBounds(10, 370, 260, 25);
        frame.getContentPane().add(btnClear);
        btnClear.addActionListener(e -> clearFields());

        statusLabel = new JLabel("");
        statusLabel.setBounds(10, 400, 660, 25);
        frame.getContentPane().add(statusLabel);

        summaryLabel = new JLabel("");
        summaryLabel.setBounds(10, 430, 660, 25);
        frame.getContentPane().add(summaryLabel);
    }

    private void addCustomerAndAccount() {
        try {
            String customerId = customerIdField.getText().trim();
            String name = nameField.getText().trim();
            String accountNumber = accountNumberField.getText().trim();
            double initialBalance = Double.parseDouble(initialBalanceField.getText().trim());

            if (customerId.isEmpty() || name.isEmpty() || accountNumber.isEmpty() || initialBalance < 0) {
                throw new IllegalArgumentException("Invalid input data.");
            }

            Customer customer = new Customer(customerId, name);
            customers.put(customerId, customer);

            Account account;
            if (checkingRadioButton.isSelected()) {
                account = new CheckingAccount(customerId, accountNumber, initialBalance);
            } else if (savingsRadioButton.isSelected()) {
                account = new SavingsAccount(customerId, accountNumber, initialBalance);
            } else {
                throw new IllegalArgumentException("Account type not selected.");
            }

            accounts.put(customerId, account);
            statusLabel.setText("Customer and account added successfully.");
        } catch (Exception e) {
            statusLabel.setText("Error: " + e.getMessage());
        }
    }

    private void displayCustomerAndAccountData() {
        try {
            String customerId = customerIdField.getText().trim();
            Customer customer = customers.get(customerId);
            Account account = accounts.get(customerId);

            if (customer == null || account == null) {
                throw new IllegalArgumentException("Customer not found.");
            }

            summaryLabel.setText(String.format("Customer ID: %s | Name: %s | Account No: %s | Balance: $%.2f",
                    customer.getCustomerId(), customer.getName(), account.accountNumber, account.balance()));
        } catch (Exception e) {
            statusLabel.setText("Error: " + e.getMessage());
        }
    }

    private void performTransaction() {
        try {
            String customerId = customerIdField.getText().trim();
            Account account = accounts.get(customerId);
            Customer customer = customers.get(customerId);

            if (account == null || customer == null) {
                throw new IllegalArgumentException("Customer not found.");
            }

            String date = transactionDateField.getText().trim();
            if (date.isEmpty()) {
                throw new IllegalArgumentException("Transaction date is required.");
            }

            double amount = Double.parseDouble(transactionAmountField.getText().trim());
            if (amount <= 0) {
                throw new IllegalArgumentException("Transaction amount must be positive.");
            }

            String transactionType;
            double fee = 0;

            if (depositRadioButton.isSelected()) {
                account.deposit(amount);
                transactionType = "Deposit";
                fee = (account instanceof CheckingAccount) ? 0.50 : 0.25;
            } else if (withdrawalRadioButton.isSelected()) {
                double preBalance = account.balance();
                account.withdrawal(amount);
                transactionType = "Withdrawal";
                if (account instanceof CheckingAccount) {
                    fee = 0.50;
                    if (account.balance() < preBalance - amount - fee) {
                        fee += 30.00; // overdraft fee
                    }
                } else {
                    fee = 0.25;
                }
            } else {
                throw new IllegalArgumentException("Transaction type not selected.");
            }

            summaryLabel.setText(String.format(
                "Customer ID: %s | Account No: %s | Type: %s | Date: %s | %s: $%.2f | Fee: $%.2f | Balance: $%.2f",
                customer.getCustomerId(),
                account.accountNumber,
                (account instanceof CheckingAccount ? "Checking" : "Savings"),
                date,
                transactionType,
                amount,
                fee,
                account.balance()
            ));

            statusLabel.setText("Transaction completed successfully.");
        } catch (NumberFormatException e) {
            statusLabel.setText("Error: Please enter a valid number for amount.");
        } catch (IllegalArgumentException e) {
            statusLabel.setText("Error: " + e.getMessage());
        } catch (Exception e) {
            statusLabel.setText("Unexpected error: " + e.getMessage());
        }
    }

    private void clearFields() {
        customerIdField.setText("");
        nameField.setText("");
        accountNumberField.setText("");
        initialBalanceField.setText("");
        transactionDateField.setText("");
        transactionAmountField.setText("");
        checkingRadioButton.setSelected(false);
        savingsRadioButton.setSelected(false);
        depositRadioButton.setSelected(false);
        withdrawalRadioButton.setSelected(false);
        stateComboBox.setSelectedIndex(0);
        statusLabel.setText("");
        summaryLabel.setText("");
    }
}
